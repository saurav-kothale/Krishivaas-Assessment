"""V0.3 Added userid to crop table

Revision ID: dc4c3db8cc9c
Revises: 1cc57946d802
Create Date: 2025-03-28 18:27:36.082256

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import text


conn = op.get_bind()


# revision identifiers, used by Alembic.
revision: str = 'dc4c3db8cc9c'
down_revision: Union[str, None] = '1cc57946d802'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    op.create_table('User',
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email')
    )
    conn.execute(text("""
        INSERT INTO "User" (user_id, role, name, email, hashed_password, created_at, updated_at, is_deleted)
        SELECT user_id, role, name, email, hashed_password, created_at, updated_at, is_deleted
        FROM "Farmer";
    """))

    op.execute("DROP TABLE IF EXISTS \"Farmer\" CASCADE")
    op.add_column('crops', sa.Column('user_id', sa.String(), nullable=True))
    op.create_foreign_key(None, 'crops', 'User', ['user_id'], ['user_id'])
    op.create_foreign_key(None, 'farm', 'User', ['user_id'], ['user_id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'farm', type_='foreignkey')
    op.create_foreign_key('farm_user_id_fkey', 'farm', 'Farmer', ['user_id'], ['user_id'])
    op.drop_constraint(None, 'crops', type_='foreignkey')
    op.drop_column('crops', 'user_id')
    op.create_table('Farmer',
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('is_deleted', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('user_id', name='Farmer_pkey'),
    sa.UniqueConstraint('email', name='Farmer_email_key')
    )
    op.execute("DROP TABLE IF EXISTS \"User\" CASCADE")
    # ### end Alembic commands ###
